A class is treated as a kind of template, on which we create objects (instances).
When assigning values to properties or calling methods, we’re already working on objects and not on classes.

One of the most important things that classes allow for is inheritance. Based on an existing class, we can create a new one, 
which will contain the properties and methods of the base class.

how do we implement inheritance without classes? In a slightly different form than that known as classes, we did it using prototypes,
i.e. existing objects connected in an appropriate way to newly created objects.
Hence the name – a prototype object model.

The ECMA6 standard introduced classes into JavaScript as an alternative to prototypes and constructors. Both of these approaches can now be applied equivalently.


let point = {x:0, y:0};
let coloredPoint = {color: "red"};

One of the properties that each object inherits is the __proto__ field. Let's see what happens when we use this field to connect our two objects.

coloredPoint.__proto__ = point;

 In normal programming, we absolutely do not use __proto__. Direct use of this field is considered obsolete, withdrawn from the standards, 
 slow. Here, we use it only to learn the basics of prototyping step by step.

The fact that we have access to it is therefore obvious. However, we try, successfully, to read the x field. What happens then? JavaScript does not find a field named x in the coloredPoint object and looks for it in the prototype.

If it doesn't find it there, it looks for it in the prototype, and so on (hence the chain of prototypes).

coloredPoint.x = 100;   // new property
console.log(coloredPoint.x);
console.log(point.x);
console.log(Object.getOwnPropertyNames(coloredPoint));

It turns out that when trying to write to such a property, JavaScript does not follow the chain of prototypes

If it doesn’t find a property directly in the object, it creates it, and assigns a new value to it. This way, among other things, the properties of the prototype are protected (and the same prototype can be used by many different objects).

point.y = 200;
console.log(coloredPoint.y);
console.log(point.y);
The change is visible both at the level of the point object and the coloredPoint object, for which point is a prototype. Using the __proto__ property for prototypes is, as we wrote earlier, not recommended. To present alternatives, let’s use a slightly more elaborate scenario.


After finding the method in the prototype, it calls it. Only one thing may need to be explained.

Look at the getType method declaration. Inside it, we refer to the type field using the word this.

We explained earlier that this refers to the object in which we define the method. That was a bit of a simplification, but usually true. In fact, this refers to the object in the context of which a given function is called
figure = {
getType(){
    return this.type ? this.type : "unknown";
}
};

let circle = {
type: "circle",
center: {x:0, y:0 ,getType(){
    return this.type ? this.type : "unknown";
}},
radius: 100
};
circle.__proto__ = figure;

console.log(figure.getType());//unknown
console.log(circle.getType());//circle   __prototype__ has same context of the object not like nested object
console.log(circle.center.getType());//unknown

****************What alternatives do we have if using __proto__ is not recommended?
First, we can use the Object.setPrototypeOf and Object.getPrototypeOf methods.
The first one allows us to associate the target object with the prototype object.
The second one returns the prototype of the indicated object (in our example, the proto variable should refer to the figure object).

Object.setPrototypeOf(circle, figure);
let proto = Object.getPrototypeOf(circle);
console.log(circle.getType());//circle


-------Object.create

let circle = Object.create(figure)
circle.type = "circle";
circle.center = {x:0, y:0},
circle.radius = 100;
console.log(circle.getType());//circle

----------Constructor
let Figure = function(){
    this.getType = function() {
        return this.type ? this.type : "unknown";
    }
};
let figure = new Figure;

Note that until now the prototype has been connected directly to the object. This time it’s different – we bind it to a function that will create objects.

let Circle = function(center, radius){
    this.type = "circle";
    this.center = center;
    this.radius = radius;
};
Circle.prototype = figure;

let circle1 = new Circle({x:0, y:0}, 10);
let circle2 = new Circle({x:100, y:100}, 100);

let Triangle = function(v1, v2, v3) {
    this.type = "triangle";
    this.vertices = [ v1, v2, v3];
};
Triangle.prototype = figure;

let triangle1 = new Triangle({x:0, y:0}, {x:50, y:50}, {x:10, y:100});

console.log(circle1.getType());//circle
console.log(triangle1.getType());//triangle

If you decide to use prototypes, it’s definitely best to use a method based on constructors or Object.create.
Let's do one more test, which will show us a very useful feature of prototypes. The prototype is an object, so we can modify it by adding new methods.
Let's say we want to modify an object that is a Circle prototype. We don't have to refer directly to the figure, but we can do it in the following way:
Circle.prototype.hi = function(){console.log("Hi!")};

We’ve added the hi method to the prototype, whose only task is to display greetings to the console.

We’ve modified the figure object, which is a prototype of the circle1, circle2, and triangle1 objects. What's important is that the hi method will be available not only for objects newly created with the Circle or Triangle constructors, 
but for all existing objects, whose prototype is just figure.

circle1.hi();//hi
triangle1.hi();//hi
figure.hi();//hi

let testString = new String("unu doi trei");
console.log(testString.length);
String.prototype.hi = function(){console.log("Hi!")};
console(string.hi());
Adding the hi writing method to the String designer is not particularly useful, but it highlights some interesting possibilities. Note that after our changes, we can also make such a piece of code:
console.log("abcd".hi());
