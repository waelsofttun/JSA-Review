Parameters validation : 
function getMeanTemp(temperatures) {
    if (!(temperatures instanceof Array)) {
        return NaN;
    }
    let sum = 0;
    for (let i = 0; i < temperatures.length; i++) {
        sum += temperatures[i];
    }
    return sum / temperatures.length;
}

console.log(getMeanTemp(10));       // -> NaN
console.log(getMeanTemp([10, 30])); // -> 20

Recursion : 
function factorial (n) {
    return n > 1 ? n * factorial(n - 1) : 1;
}

console.log(factorial(6)); // -> 720
Recursion is commonly used in programming. However, as with any solution, recursion must be handled with care. We shouldn't use it where we can't estimate the number of embedded calls. 
We should also be very careful in formulating the condition that will interrupt the function sequence calls – errors can cause the program to suspend.

Functions as first-class members : 
In JavaScript, functions are first-class members. This term means that functions can be treated as any data, which can be stored in variables or passed as arguments to other functions. 
For example, we can declare the showMessage function and then store it in the variable sm.

function showMessage(message) {
    console.log('Message: ${message}');
}

let sm = showMessage;

sm("This works!"); // -> Message: This works!
console.log(typeof sm); // -> function

But it’s important to remember that when assigning a function to a variable, we don't use a function call operator, 
as this would execute the function and assign the result of the function to a variable, and not to the function itself.

This property is especially useful when passing the function as a call parameter to other functions, which we will soon learn more about. For now,
let's test that something like this is actually feasible.

function add(a, b) {
    return a + b;
}

function multiply(a, b) {
    return a * b;
}

function operation(func, first, second) {
    return func(first, second);
}

console.log(operation(add, 10, 20)); // -> 30
console.log(operation(multiply, 10, 20)); // -> 200
////////////////////////////
Function expressions : 

We first declare the add function, and then store it in the variable myAdd. We can call the same function using both the name add and the variable myAdd. 
We can shorten this notation and declare the function by storing it in a variable.
this form of defining a function is called Named function expression.
let myAdd = function add(a, b) {
    return a + b;
}

console.log(myAdd(10, 20)); // -> 30
console.log(add(10, 20)); // -> 30

 anonymous function expression : 
 
 This form of defining a function is called function expression. In this case, it is specifically a named function expression, because the function has a name (add). If there is a named function expression, there will probably also be an unnamed, 
 or precisely, an anonymous function expression. In fact, simply remove the name following the function keyword to change the function from named to anonymous.

 let myAdd = function(a, b) {
    return a + b;
}

console.log(myAdd(10, 20)); // -> 30

 This will be much more evident when passing a function as a call parameter to another function. Let's look at the example:
 function operation(func, first, second) {
    return func(first, second);
}

let myAdd = function(a, b) {
    return a + b;
}

console.log(operation(myAdd, 10, 20)); // -> 30

console.log(operation(function(a, b) {
    return a * b;
}, 10, 20)); // -> 200

it may look like a completely useless mechanism, but in the real world, it is used very often.


Callbacks : 

Functions that are passed as arguments to other functions may seem quite exotic and not very helpful, but in fact, they are a very important part of programming.
So important that they even get their own name. They are callback functions. 

Synchronous callbacks :
If you call a function, the instructions in it will be executed at the time of the call. If we pass another function to this function as an argument, 
and we call it inside an outer function as well, then all instructions will keep their natural order.

let inner = function() {
    console.log('inner 1');
}

let outer = function(callback) {
    console.log('outer 1');
    callback();
    console.log('outer 2');
}

console.log('test 1');
outer(inner);
console.log('test 2');

Asynchronous callbacks :
In the case of client-side JavaScript running in a browser, it is limited to event-based programming
setTimeout function. This function takes another function (a callback) and the time expressed in milliseconds as arguments. The callback function is executed after the specified time, and meanwhile, the next program instruction (placed in the code after setTimeout) will be executed.

Thus, the moment the callback function is called is not determined by its order, but by an arbitrarily imposed delay. The delay only applies to the callback function given to setTimeout, while the rest of the code is still executed synchronously.

setTimeout and setInterval functions

The setTimeout function is used when you want to cause a delayed action. A similar function is setInterval. This time, the action is also performed with a delay, but periodically, so it is repeated at fixed intervals. In the meantime, the main program is executed, and at every specified time, the callback given as an argument for a setInterval call is called.

let inner = function() {
console.log('inner 1');
}

let outer = function(callback) {
console.log('outer 1');
let timerId = setInterval(callback, 1000) /*ms*/;
console.log(typeof timerId);
console.log('outer 2');

setTimeout(function(){
    clearInterval(timerId);
}, 5500);
}

console.log('test 1');
outer(inner);
console.log('test 2');

the setInterval function returns an identifier during the call, which can be used to remove the timer used in it (and consequently to stop the cyclical callback function call). We will do this in the next example. First, we run setInterval, which will call the callback function (i.e. the inner function) in one-second intervals. Then we call setTimeout, which will turn off the timer associated with the previously called setInterval after 5.5 seconds. As a result, the inner function should be called five times. In the meantime, the rest of the program will be executed ...

The window object has a method (or its own function) named addEventListener. This function allows you to register a certain action to be performed in response to a window-related event. Such an event can be a "click", which is a single mouse click on any place on the page (there is a limited set of named events associated with a particular object, to which it can react). The action to be taken is passed to the addEventListener method as a callback function.

window.addEventListener("click", function() {
    console.log("clicked!");
});

Arrow function :

An arrow function is a shorter form of a function expression. An arrow function expression is composed of: parentheses containing zero to multiple parameters (if exactly one parameter is present, the parentheses can be omitted); an arrow that looks like this "=>"; and the body of the function, which can be surrounded by curly brackets if the body is longer. If an arrow function has only one statement and returns its value, we can omit the return keyword, as it will be implicitly added. For example, the function add, which we already know:

let add = (a, b) => {
    return a + b;
}
console.log(add(10, 20)); // -> 30
/////If an arrow function has only one statement and returns its value
let add = (a, b) => a + b;
console.log(add(10, 20)); // -> 30

