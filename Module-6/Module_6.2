SyntaxError : 
As we previously said, a SyntaxError appears when a code is ill-formed, when there are typos in the keywords, unmatching parentheses or brackets, etc. The code can’t even be executed.
"use strict";
iff (true) { //-> Uncaught SyntaxError: Unexpected token '{'
    console.log("true");
}
 ReferenceError ( semantic error ) : 
 let a = b; // -> Uncaught ReferenceError: b is not defined

 TypeError : 
 This type of error occurs when a certain value is not of the expected type (i.e. you try to perform an operation on it that is not acceptable).
  Typical examples are changing the constant value or checking the length of a variable that is not a string. This error is particularly 
  important when working with objects that are outside the scope of this course (we will talk about them in the next part of the course). This is a typical run-time error, 
  so the appropriate exception will be thrown while the program is running, after reaching the problematic instruction.

  RangeError : 
  his type of error is generated when you pass a value to a function that is outside its acceptable range.    
  Again, it is a run-time error
  let testArray1 = Array(10);
console.log(testArray1.length); // -> 10
let testArray2 = Array(-1); // -> Uncaught RangeError: Invalid array length
console.log(testArray2.length);

There are a few more error types: EvalError, InternalError, and URIError, but they’re rather rare, and we’ll come back to them if needed.

The try ... catch statement : 

try {
    // code to try
} catch (error) {
    // code to run in case of an error, which throw an exception
}

Note that the catch keyword is followed by parentheses containing the parameter error. This is a variable name that will hold information about the error that was caught, and it can have any valid name, but the names error, err, or just e, are commonly used. In the case of an exception thrown by JavaScript, the error object will contain information about the error type, and is converted to a string to be logged or processed in any way the developer needs.

Note that try...catch will not work on a SyntaxError

Conditional exception handling : 
Sometimes we want to be able to react differently to specific types of errors inside the catch block. We can do this by using the operator instanceof.
If, for example, we receive an error in the catch block (passed as an error argument), we can check whether it is of the ReferenceError type as follows:
let result = error instanceof ReferenceError;

It’s important to know that any variable that gets declared using the let keyword inside a try block is not accessible in the catch block (nor in the finally block, 

The finally statement : 

try {
    // code to try
} finally {
    // this will be always executed
}

The finally block can also be used together with the catch block, as both of them are optional, but at least one of them is required by the try statement, and if none of them is present, a SyntaxError is thrown.


Why should we use a finally block?

the most important is that the finally block will be executed even when an error is thrown from the catch block.


Try...catch...finally blocks can be nested, so we can use a whole try...catch block inside another try...catch block. This is useful when we expect multiple errors to occur and need to handle them all.


The throw statement and custom errors : 

To throw an exception, we use the throw instruction. It is followed by any value that will be treated as an exception. It can be, for example, a number, or one of the ready-made error objects (e.g. RangeError).

An exception that we throw will cause the program to react in the same way as the original JavaScript exceptions (i.e. it will stop its execution). That is, unless we throw it inside the try block to handle it

console.log("start"); // -> start
throw 100 ; // -> Uncaught 100
console.log("end");


console.log("start"); // -> start
try {
    throw 100;
} catch (error) {
    console.log(error); // -> 100
}
console.log("end"); // -> end

use of  ready-made error objects 


Function factorial(n) {
    if (n > 20) {
        throw new RangeError("Max value 20");
    }
    let result = 1;
    for (; n > 1; n--) {
        result = result * n;
    }
    return result;
}

console.log(factorial(20)); // -> 2432902008176640000
console.log(factorial(1000)); // -> Uncaught RangeError: Max value 20


 The new object is initiated by the Max value 20 string. And such a new object, of the RangeError type, containing, among other things, the string we provided, will be thrown if the n parameter exceeds the allowed value.

 
