Note the use of the Date.now method when initiating the time property. It returns the current time. 
  The time format is quite specific: the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC (the UNIX epoch). 
  With the help of other Date methods, we can convert this format to something more readable, but at the moment, 
  there is no need to do so.

Class Declaration : 
Using classless constructor : 
let Vehicle = function(id, latitude, longitude){

this.setPosition = function(latitude, longitude) {
    this.time = Date.now();
    this.longitude = longitude;
    this.latitude = latitude;
};

this.id = id;
this.status = "unavailable";
this.setPosition(latitude, longitude);
};


/*The values will be recognized by their names, not by their order. The constructor accepts this object as the initialData parameter and decomposes it into individual fields. */

let Vehicle = function(initialData){
let {id, latitude, longitude} = initialData; // destructuring assignment.

this.setPosition = function(latitude, longitude) {
    this.time = Date.now();
    this.longitude = longitude;
    this.latitude = latitude;
};

this.id = id;
this.status = "unavailable"; 
this.setPosition(latitude, longitude);
};

let vehicle1 = new Vehicle({id: "AL1024", latitude: 59.367647, longitude: 18.213451});
let vehicle2 = new Vehicle({longitude: 18.213423, latitude: 59.367628, id: "AL1024"});

/*The use of initialData is a bit redundant, and exactly the same effect can be achieved by using a destructive assignment directly in the function parameter (here in the constructor).*/

Let Vehicle = function({id, latitude, longitude}){

this.setPosition = function({latitude, longitude}) {
    this.time = Date.now();
    this.longitude = longitude;
    this.latitude = latitude;
};

this.getPosition = function() {
    return {
        latitude: this.latitude,
        longitude: this.longitude
    };
};

this.id = id;
this.status = "unavailable";
this.setPosition({latitude, longitude});
};

let vehicle1 = new Vehicle({id: "AL1024", latitude: 59.367647, longitude: 18.213451});
let vehicle2 = new Vehicle({longitude: 18.213423, latitude: 59.367628, id: "AL1024"});

Class declaration : 

The simplest form class declaration and use to create an object can look like this:
class EmptyClass {};
let emptyObject = new EmptyClass;

Additionally, each class should have a constructor, that is, a function that will be called when creating a new object on its basis. 
The constructor is not given a name, but in each class it is named the same way: constructor().
  class AlmostEmptyClass {

constructor(sth) {
    console.log(sth);
};

sayHi() {
    console.log("Hi!")
};

};

let almostEmptyObject = new AlmostEmptyClass(120); // -> 120
almostEmptyObject.sayHi(); // -> Hi!

It's worth highlighting just one cosmetic detail â€“ make sure that the methods in the class are not separated by commas.



  class Vehicle {

 constructor({id, latitude, longitude}){
    this.setPosition = function({latitude, longitude}) { //function definition
    this.time = Date.now();
    this.longitude = longitude;
    this.latitude = latitude;
    };

    this.getPosition = function() {
        return {
            latitude: this.latitude,
            longitude: this.longitude
        };
    };

    this.id = id;
		this.status = "unavailable";
    this.setPosition({latitude, longitude});//function call
 };
};

let vehicle1 = new Vehicle({id: "AL1024", latitude: 59.367647, longitude: 18.213451});
let vehicle2 = new Vehicle({longitude: 18.213423, latitude: 59.367628, id: "AL1024"});

The example is correct, but not very elegant.

The methods getPosition and setPosition are unnecessarily declared inside the constructor.
  class Vehicle {

constructor({id, latitude, longitude}){
    this.id = id;
    this.status = "unavailable";
    this.setPosition({latitude, longitude});
};

setPosition({latitude, longitude}) {
    this.time = Date.now();
    this.longitude = longitude;
    this.latitude = latitude;
};

getPosition() {
    return {
        latitude: this.latitude,
        longitude: this.longitude
    };
};
};

At first glance, you can see that an object created on the basis of this class will have the getPosition and setPosition methods.

The ability to store a function in a variable (i.e. a function expression) indicates that functions in JavaScript are first-class citizens.
  The same is true for classes. We can declare a named class, as we have done in the previous examples, but we can also store unnamed ones in a variable.
  let AlmostEmptyClass = class {

constructor(sth) {
    console.log(sth);
};

sayHi() {
    console.log("Hi!")
};

};

let almostEmptyObject = new AlmostEmptyClass(120); // 120
almostEmptyObject.sayHi(); // -> Hi!

console.log(typeof almostEmptyObject); // -> "object"
This is true information, but rather not what we expected. We are looking for the class from which our object was created, and not just a confirmation that the object is an object.
  In every object (or maybe almost every object, and certainly in one that is created using the class or constructor function) we will find the field constructor.
  
  console.log(almostEmptyObject.constructor.name); // -> "AlmostEmptyClass"

However, the instanceof operator is used more often in practice than constructor.name. It is not an alternative in the literal sense of the word. 
  The instanceof operator does not return the name of the class whose object is an instance, but only tests whether the class and object are related.

console.log(almostEmptyObject instanceof AlmostEmptyClass); // -> true
console.log(almostEmptyObject instanceof String); // -> false
let str = new String("test me");
console.log(str instanceof String); // -> true

console.log(almostEmptyObject instanceof Object); // -> true
First of all, all objects created with the usage of classes inherit implicitly from the Object class. Imagine that we have the ABC class, which is openly inherited from the DEF class, and this in turn from the GHI class. 
The GHI class is written from scratch, but by default it inherits from the generic Object class.
The second issue to be clarified is the same instanceof behavior. It tests the whole inheritance chain of the specified class. If we create an abc object based on the ABC class, then all of them will be true:

abc instanceof ABC; // -> true
abc instanceof DEF; // -> true
abc instanceof GHI; // -> true
abc instanceof Object; // -> true

So in the case of objects, the typeof operator will only return a confirmation that what we are examining is an object.

The instanceof operator will let us confirm (or deny) that the indicated object is an instance of a certain class.

However, when looking for a class name, we can use the constructor.name property of the object.
